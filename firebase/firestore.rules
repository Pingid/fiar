rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

	function validateArticles(data) {
		return data is map &&
		data.keys().hasOnly(['title', 'image', 'body', 'width', 'meta', 'tags']) &&
		data.title is string &&
		data.image is map &&
		data.image.keys().hasOnly(['fullPath', 'bucket', 'name']) &&
		data.image.fullPath is string &&
		data.image.bucket is string &&
		data.image.name is string &&
		data.body is string &&
		data.width is number &&
		(data.meta == null ||
			(data.meta is map &&
				data.meta.keys().hasOnly(['title', 'description']) &&
				data.meta.title is string &&
				data.meta.description is string)) &&
		data.tags is list
	}

	function validateTest(data) {
		return data is map &&
		data.keys().hasOnly(['title', 'count', 'metadata', 'links']) &&
		data.title is string &&
		data.count is number &&
		data.metadata is map &&
		data.metadata.keys().hasOnly(['time', 'seo']) &&
		data.metadata.time is string &&
		(data.metadata.seo == null ||
			(data.metadata.seo is map &&
				data.metadata.seo.keys().hasOnly(['title', 'description']) &&
				data.metadata.seo.title is string &&
				data.metadata.seo.description is string)) &&
		data.links is list
	}

	function validatePagesLanding(data) {
		return data is map &&
		data.keys().hasOnly(['highlight', 'more', 'meta']) &&
		data.highlight is path &&
		data.more is list &&
		(data.meta == null ||
			(data.meta is map &&
				data.meta.keys().hasOnly(['title', 'description']) &&
				data.meta.title is string &&
				data.meta.description is string))
	}

	match /articles/{articleId} {
		allow update: if request.auth.token.email.matches('.+@example.com$') &&
			validateArticles(request.resource.data)
		allow create: if request.auth.token.email.matches('.+@example.com$') &&
			validateArticles(request.resource.data)
		allow read: if true
		allow write: if request.auth.token.email.matches('.+@example.com$')
	}

	match /test/{id} {
		allow update: if request.auth.token.email.matches('.+@example.com$') &&
			validateTest(request.resource.data)
		allow create: if request.auth.token.email.matches('.+@example.com$') &&
			validateTest(request.resource.data)
		allow read: if true
		allow write: if request.auth.token.email.matches('.+@example.com$')
	}

	match /pages/landing {
		allow update: if request.auth.token.email.matches('.+@example.com$') &&
			validatePagesLanding(request.resource.data)
		allow create: if request.auth.token.email.matches('.+@example.com$') &&
			validatePagesLanding(request.resource.data)
		allow read: if true
		allow write: if request.auth.token.email.matches('.+@example.com$')
	}
  }
}